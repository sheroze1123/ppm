import argparse
import traceback
import socket
import threading

from parser import FileParser

def serve(sock, filename):
    try:
        parser = FileParser(filename)
        sock.send("{}\n".format(parser.n))
        sock.send("{}\n".format(parser.L))
        sock.send("{}\n".format(parser.N))
        sock.send("{}\n".format(parser.N_p))
        for m in parser.masses:
            sock.send("{}\n".format(m))

        for _ in range(parser.N_p):
            msg = sock.recv(3)
            if msg != "g\r\n":
                print "msg = '{}'".format(msg)
                return
            for (x, y) in parser.next():
                sock.send("{} {} 0.0 0.0\n".format(x, y))
    except Exception:
        traceback.print_exc()

def main(args):
    host = "localhost"
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    serversocket.bind((host, args.port))
    serversocket.listen(5)
    print "Listening on {}:{}...".format(host, args.port)
    while True:
        (sock, _) = serversocket.accept()
        t = threading.Thread(target=serve, args=(sock, args.filename))
        t.run()

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "filename",
        help="text file generated by marshaller.cpp"
    )
    parser.add_argument(
        "-p", "--port",
        type=int,
        default=8080,
        help="port to listen on"
    )
    return parser.parse_args()

if __name__ == "__main__":
    main(parse_args())
