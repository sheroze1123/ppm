import matplotlib
matplotlib.use('Agg')

from matplotlib import animation
from matplotlib import pyplot as plt
from random import randint
import argparse
import math
import numpy as np

# Marshaller text file parser.
class Parser(object):
    def __init__(self, filename):
        self.f = open(filename, "r")
        self.n = int(self.f.readline())
        self.L = float(self.f.readline())
        self.N = int(self.f.readline())
        self.N_p = int(self.f.readline())
        self.masses = [float(self.f.readline()) for _ in range(self.N_p)]

    def parse(self):
        """Parses (positions, velocities)"""
        positions = []
        velocities = []
        for _ in range(self.N_p):
            x, y, vx, vy = [float(_) for _ in self.f.readline().split()]
            positions.append((x, y))
            velocities.append((vx, vy))
        return (positions, velocities)

def black(n, m):
    """
    Returns a n by m RGBA numpy array where each pixel is black with 100%
    opacity.
    """
    a = np.zeros((n, m, 4))
    a[:,:,3] += 1
    return a

def render(points, masses, mass, a):
    """
    Given a list of (x, y) coordinates (`points`), their masses (`masses`), the
    amount of mass to make a white pixel (`mass`), and a numpy array (`a`),
    render decreases the opacity of a[x, y] for each (x, y) in `points`
    proportional to its mass. This has the effect of whitening the position of
    each particle. If multiple particles overlap, the position becomes whiter.
    It is a precondition that all (x, y) coordinates are within `a`.
    """
    for ((x, y), m) in zip(points, masses):
        a[x,y,3] = max(a[x,y,3] - (m / mass), 0)

def main(args):
    parser = Parser(args.filename)
    fps = args.fps               # frames per second
    frames = parser.n            # number of mp4 frames
    nparticles = parser.N_p + 1  # number of particles
    pixels = args.pixels         # height and width of mp4 in pixels

    fig = plt.figure()
    im = plt.imshow(black(pixels, pixels), interpolation="none")

    def init():
        a = black(pixels, pixels)
        im.set_array(a)
        return [im]

    def animate(i):
        def scale(x):
            return int(x * float(pixels) / parser.L)
        (pos, _) = parser.parse()
        pos = [(scale(x), scale(y)) for (x, y) in pos]
        a = black(pixels, pixels)
        render(pos, parser.masses, args.mass, a)
        im.set_array(a)
        return [im]

    anim = animation.FuncAnimation(fig, animate, init_func=init, frames=frames, blit=True)
    anim.save('particles.mp4', fps=fps)

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "filename",
        help="text file generated by marshaller.cpp"
    )
    parser.add_argument(
        "-p", "--pixels",
        type=int,
        default=100,
        help="side length of mp4 in pixels"
    )
    parser.add_argument(
        "-f", "--fps",
        type=int,
        default=30,
        help="frames per second"
    )
    parser.add_argument(
        "-m", "--mass",
        type=int,
        default=4,
        help="the amount of mass to make a pixel compeltely white"
    )

    return parser.parse_args()

if __name__ == "__main__":
    main(parse_args())
