from random import randint
import argparse
import math
import moviepy.editor as mpy
import numpy as np

# Marshaller text file parser.
class Parser(object):
    def __init__(self, filename):
        self.last = None                  # the last set of data read
        self.f = open(filename, "r")      # underlying file
        self.n = int(self.f.readline())   # number of time steps
        self.L = float(self.f.readline()) # side length of simulation
        self.N = int(self.f.readline())   # side length of grid points
        self.N_p = int(self.f.readline()) # number of particles
        self.masses = [float(self.f.readline()) for _ in range(self.N_p)]

    def parse(self):
        """
        Parses the next set of (positions, velocities) from the underlying
        file. If the end of the file is reached, then the last valid data is
        returned.
        """
        try:
            positions = []
            velocities = []
            for _ in range(self.N_p):
                x, y, vx, vy = [float(_) for _ in self.f.readline().split()]
                positions.append((x, y))
                velocities.append((vx, vy))
            self.last = (positions, velocities)
            return self.last
        except ValueError:
            # A ValueError is raised when we try to read off the end of the
            # file. We catch this exception and return the last valid data
            # read.
            return self.last

def render(points, masses, mass, a):
    """TODO: rewrite for moviepy."""
    for ((x, y), m) in zip(points, masses):
        a[x,y] = 255

def main(args):
    parser = Parser(args.filename)
    fps = args.fps                  # frames per second
    frames = parser.n               # number of mp4 frames
    duration = float(frames) / fps  # duration of mp4 in seconds
    nparticles = parser.N_p + 1     # number of particles
    pixels = args.pixels            # height and width of mp4 in pixels
    a = np.zeros(pixels, pixels, 3) # black image

    def make_frame(t):
        def scale(x):
            return int(x * float(pixels) / parser.L)

        (pos, _) = parser.parse()
        pos = [(scale(x), scale(y)) for (x, y) in pos]
        a[:] = 0
        render(pos, parser.masses, args.mass, a)
        return a

    clip = mpy.VideoClip(make_frame, duration=duration)
    clip.write_videofile("particles.mp4", fps=fps)

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "filename",
        help="text file generated by marshaller.cpp"
    )
    parser.add_argument(
        "-p", "--pixels",
        type=int,
        default=100,
        help="side length of mp4 in pixels"
    )
    parser.add_argument(
        "-f", "--fps",
        type=int,
        default=30,
        help="frames per second"
    )
    parser.add_argument(
        "-m", "--mass",
        type=int,
        default=4,
        help="the amount of mass to make a pixel compeltely white"
    )

    return parser.parse_args()

if __name__ == "__main__":
    main(parse_args())
