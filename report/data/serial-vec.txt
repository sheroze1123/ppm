
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at serial_opt.cpp(76,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at common.cpp(49,5) inlined into serial_opt.cpp(78,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between rho_18337 line 52 and rho_18337 line 52
      remark #15346: vector dependence: assumed ANTI dependence between rho_18337 line 52 and rho_18337 line 52
   LOOP END

   LOOP BEGIN at common.cpp(57,5) inlined into serial_opt.cpp(78,9)
      remark #15388: vectorization support: reference rho_18337 has aligned access   [ common.cpp(58,9) ]
      remark #15388: vectorization support: reference rho_18337 has aligned access   [ common.cpp(58,9) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 13.440 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at common.cpp(57,5) inlined into serial_opt.cpp(78,9)
   <Remainder>
      remark #15388: vectorization support: reference rho_18337 has aligned access   [ common.cpp(58,9) ]
      remark #15388: vectorization support: reference rho_18337 has aligned access   [ common.cpp(58,9) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at common.cpp(57,5) inlined into serial_opt.cpp(78,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at common.cpp(65,5) inlined into serial_opt.cpp(83,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at common.cpp(70,9) inlined into serial_opt.cpp(83,9)
         remark #15389: vectorization support: reference rho_k_18348 has unaligned access   [ common.cpp(79,13) ]
         remark #15389: vectorization support: reference rho_k_18348 has unaligned access   [ common.cpp(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15460: masked strided loads: 2 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 95 
         remark #15477: vector loop cost: 22.000 
         remark #15478: estimated potential speedup: 4.300 
         remark #15479: lightweight vector operations: 41 
         remark #15487: type converts: 2 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at common.cpp(70,9) inlined into serial_opt.cpp(83,9)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at common.cpp(95,5) inlined into serial_opt.cpp(89,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at common.cpp(96,9) inlined into serial_opt.cpp(89,9)
      <Peeled>
      LOOP END

      LOOP BEGIN at common.cpp(96,9) inlined into serial_opt.cpp(89,9)
         remark #15388: vectorization support: reference acc_x_18354 has aligned access   [ common.cpp(97,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(97,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(97,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 48 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 11.650 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at common.cpp(96,9) inlined into serial_opt.cpp(89,9)
      <Remainder>
         remark #15388: vectorization support: reference acc_x_18354 has aligned access   [ common.cpp(97,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(97,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(97,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at common.cpp(96,9) inlined into serial_opt.cpp(89,9)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at common.cpp(101,5) inlined into serial_opt.cpp(89,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at common.cpp(102,9) inlined into serial_opt.cpp(89,9)
      <Peeled>
      LOOP END

      LOOP BEGIN at common.cpp(102,9) inlined into serial_opt.cpp(89,9)
         remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(103,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(103,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(103,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 48 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 11.600 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at common.cpp(102,9) inlined into serial_opt.cpp(89,9)
      <Remainder>
         remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(103,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(103,13) ]
         remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(103,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at common.cpp(102,9) inlined into serial_opt.cpp(89,9)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at common.cpp(109,5) inlined into serial_opt.cpp(89,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between acc_x_18354 line 110 and acc_x_18354 line 111
      remark #15346: vector dependence: assumed OUTPUT dependence between acc_x_18354 line 111 and acc_x_18354 line 110
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15388: vectorization support: reference phi_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 90 
      remark #15477: vector loop cost: 4.250 
      remark #15478: estimated potential speedup: 11.660 
      remark #15479: lightweight vector operations: 14 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15388: vectorization support: reference phi_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference acc_y_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15388: vectorization support: reference phi_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 90 
      remark #15477: vector loop cost: 4.750 
      remark #15478: estimated potential speedup: 10.960 
      remark #15479: lightweight vector operations: 14 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference acc_y_18354 has aligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(116,9) ]
      remark #15389: vectorization support: reference acc_y_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15389: vectorization support: reference phi_18354 has unaligned access   [ common.cpp(117,9) ]
      remark #15388: vectorization support: reference phi_18354 has aligned access   [ common.cpp(117,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Multiversioned v3>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at common.cpp(115,5) inlined into serial_opt.cpp(89,9)
   <Remainder, Multiversioned v3>
   LOOP END

   LOOP BEGIN at common.cpp(128,5) inlined into serial_opt.cpp(91,9)
      remark #15388: vectorization support: reference particle_pos_18367 has aligned access   [ common.cpp(129,18) ]
      remark #15388: vectorization support: reference particle_vel_18367 has aligned access   [ common.cpp(131,9) ]
      remark #15388: vectorization support: reference particle_vel_18367 has aligned access   [ common.cpp(131,9) ]
      remark #15388: vectorization support: reference particle_pos_18367 has aligned access   [ common.cpp(133,9) ]
      remark #15388: vectorization support: reference particle_vel_18367 has aligned access   [ common.cpp(133,9) ]
      remark #15415: vectorization support: gather was generated for the variable a_x_18367:  indirect access    [ common.cpp(131,30) ]
      remark #15415: vectorization support: gather was generated for the variable a_y_18367:  indirect access    [ common.cpp(132,32) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15458: masked indexed (or gather) loads: 2 
      remark #15460: masked strided loads: 20 
      remark #15462: unmasked indexed (or gather) loads: 8 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 640 
      remark #15477: vector loop cost: 189.250 
      remark #15478: estimated potential speedup: 3.380 
      remark #15479: lightweight vector operations: 140 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 6 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at common.cpp(128,5) inlined into serial_opt.cpp(91,9)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at serial_opt.cpp(38,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ serial_opt.cpp(39,9) ]
LOOP END
===========================================================================

Begin optimization report for: random_particle_initialization(int, double, int, double, int, double *, double *, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(334,7) inlined into common.cpp(18,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_x line 340 and _M_x line 336
LOOP END

LOOP BEGIN at common.cpp(22,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(3478,7) inlined into common.cpp(25,31)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(25,31)
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 19 
         remark #15477: vector loop cost: 8.370 
         remark #15478: estimated potential speedup: 2.220 
         remark #15479: lightweight vector operations: 31 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(412,7) inlined into common.cpp(25,31)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between _M_x line 416 and _M_x line 416
         remark #15346: vector dependence: assumed ANTI dependence between _M_x line 416 and _M_x line 416
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(25,31)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(3478,7) inlined into common.cpp(26,31)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(26,31)
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 19 
         remark #15477: vector loop cost: 8.370 
         remark #15478: estimated potential speedup: 2.220 
         remark #15479: lightweight vector operations: 31 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(412,7) inlined into common.cpp(26,31)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between _M_x line 416 and _M_x line 416
         remark #15346: vector dependence: assumed ANTI dependence between _M_x line 416 and _M_x line 416
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(26,31)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(3478,7) inlined into common.cpp(27,32)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(27,32)
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(407,26) ]
         remark #15388: vectorization support: reference _M_x has aligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference _M_x has unaligned access   [ /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(408,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 19 
         remark #15477: vector loop cost: 8.370 
         remark #15478: estimated potential speedup: 2.220 
         remark #15479: lightweight vector operations: 31 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(412,7) inlined into common.cpp(27,32)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between _M_x line 416 and _M_x line 416
         remark #15346: vector dependence: assumed ANTI dependence between _M_x line 416 and _M_x line 416
      LOOP END

      LOOP BEGIN at /opt/rh/devtoolset-3/root/usr/include/c++/4.9.2/bits/random.tcc(404,7) inlined into common.cpp(27,32)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================
